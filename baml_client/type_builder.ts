/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export { FieldType, EnumBuilder, ClassBuilder }

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    CharacterArchetypesResponse: ClassViewer<'CharacterArchetypesResponse', "protagonistType" | "supportingRoles" | "relationshipDynamics">;
    
    ContentGuidelinesResponse: ClassViewer<'ContentGuidelinesResponse', "contentRestrictions" | "culturalSensitivities" | "educationalValue">;
    
    PacingResponse: ClassViewer<'PacingResponse', "narrativeStructure" | "pacingStyle" | "climaxIntensity">;
    
    ProjectFieldsResponse: ClassViewer<'ProjectFieldsResponse', "projectTitle" | "shortDescription" | "longDescription">;
    
    QualityAssessment: ClassViewer<'QualityAssessment', "qualityScore" | "recommendations">;
    
    ReferenceResponse: ClassViewer<'ReferenceResponse', "visualReferences" | "narrativeReferences">;
    
    SettingResponse: ClassViewer<'SettingResponse', "timePeriod" | "geographicSetting" | "socialContext" | "scale">;
    
    ThematicResponse: ClassViewer<'ThematicResponse', "moralQuestions" | "messageTakeaway">;
    
    VisualStyleResponse: ClassViewer<'VisualStyleResponse', "symbolicColors" | "lightingPreferences">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "CharacterArchetypesResponse","ContentGuidelinesResponse","PacingResponse","ProjectFieldsResponse","QualityAssessment","ReferenceResponse","SettingResponse","ThematicResponse","VisualStyleResponse",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.CharacterArchetypesResponse = this.tb.classViewer("CharacterArchetypesResponse", [
          "protagonistType","supportingRoles","relationshipDynamics",
        ]);
        
        this.ContentGuidelinesResponse = this.tb.classViewer("ContentGuidelinesResponse", [
          "contentRestrictions","culturalSensitivities","educationalValue",
        ]);
        
        this.PacingResponse = this.tb.classViewer("PacingResponse", [
          "narrativeStructure","pacingStyle","climaxIntensity",
        ]);
        
        this.ProjectFieldsResponse = this.tb.classViewer("ProjectFieldsResponse", [
          "projectTitle","shortDescription","longDescription",
        ]);
        
        this.QualityAssessment = this.tb.classViewer("QualityAssessment", [
          "qualityScore","recommendations",
        ]);
        
        this.ReferenceResponse = this.tb.classViewer("ReferenceResponse", [
          "visualReferences","narrativeReferences",
        ]);
        
        this.SettingResponse = this.tb.classViewer("SettingResponse", [
          "timePeriod","geographicSetting","socialContext","scale",
        ]);
        
        this.ThematicResponse = this.tb.classViewer("ThematicResponse", [
          "moralQuestions","messageTakeaway",
        ]);
        
        this.VisualStyleResponse = this.tb.classViewer("VisualStyleResponse", [
          "symbolicColors","lightingPreferences",
        ]);
        
        
    }

    reset(): void {
        this.tb.reset();
        // TODO: This should happen in Rust. Problem is, when we construct the
        // typebuilder we instantiate class builders once and it seems to make
        // a JS copy, bypassing the Rust side? In Python however, every time we
        // access a class builder with @property, we get a new instance that
        // wraps over the Rust type builder, so we only need to call tb.reset().
        // In JS it's not possible unless we refactor the way class builders are
        // accessed.
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}