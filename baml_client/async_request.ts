/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {InitialStoryResponse, ProjectFieldsResponse, QualityMetrics} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
}

export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async GenerateAllProjectFields(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,primaryGenres?: string[] | null,corePremise?: string | null,targetAudience?: string[] | null,tone?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateAllProjectFields",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingTitle": existingTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null,"primaryGenres": primaryGenres?? null,"corePremise": corePremise?? null,"targetAudience": targetAudience?? null,"tone": tone?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateInitialStory(
      projectName: string,projectTitle?: string | null,shortDescription?: string | null,longDescription?: string | null,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],corePremise: string,targetAudience: string[],tone: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateInitialStory",
        {
          "projectName": projectName,"projectTitle": projectTitle?? null,"shortDescription": shortDescription?? null,"longDescription": longDescription?? null,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"tone": tone
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateLongDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateLongDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"projectTitle": projectTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateMood(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,selectedTones?: string[] | null,existingMood?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateMood",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"selectedTones": selectedTones?? null,"existingMood": existingMood?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GeneratePrimaryGenres(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingGenres?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GeneratePrimaryGenres",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingGenres": existingGenres?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateProjectTitle(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateProjectTitle",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingTitle": existingTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateShortDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateShortDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"projectTitle": projectTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateSimpleCorePremise(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,primaryGenres: string[],existingPremise?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateSimpleCorePremise",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"existingPremise": existingPremise?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateStoryWithContext(
      projectData: string,additionalContext?: string | null,focusAreas?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateStoryWithContext",
        {
          "projectData": projectData,"additionalContext": additionalContext?? null,"focusAreas": focusAreas?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTargetAudience(
      projectName: string,primaryGenres: string[],corePremise: string,movieFormat: string,durationUnit: number,existingAudience?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateTargetAudience",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"movieFormat": movieFormat,"durationUnit": durationUnit,"existingAudience": existingAudience?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTone(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,existingTone?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateTone",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"existingTone": existingTone?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class AsyncHttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async GenerateAllProjectFields(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,primaryGenres?: string[] | null,corePremise?: string | null,targetAudience?: string[] | null,tone?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateAllProjectFields",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingTitle": existingTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null,"primaryGenres": primaryGenres?? null,"corePremise": corePremise?? null,"targetAudience": targetAudience?? null,"tone": tone?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateInitialStory(
      projectName: string,projectTitle?: string | null,shortDescription?: string | null,longDescription?: string | null,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],corePremise: string,targetAudience: string[],tone: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateInitialStory",
        {
          "projectName": projectName,"projectTitle": projectTitle?? null,"shortDescription": shortDescription?? null,"longDescription": longDescription?? null,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"tone": tone
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateLongDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateLongDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"projectTitle": projectTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateMood(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,selectedTones?: string[] | null,existingMood?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateMood",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"selectedTones": selectedTones?? null,"existingMood": existingMood?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GeneratePrimaryGenres(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingGenres?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GeneratePrimaryGenres",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingGenres": existingGenres?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateProjectTitle(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateProjectTitle",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingTitle": existingTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateShortDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateShortDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"projectTitle": projectTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateSimpleCorePremise(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,primaryGenres: string[],existingPremise?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateSimpleCorePremise",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"existingPremise": existingPremise?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateStoryWithContext(
      projectData: string,additionalContext?: string | null,focusAreas?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateStoryWithContext",
        {
          "projectData": projectData,"additionalContext": additionalContext?? null,"focusAreas": focusAreas?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTargetAudience(
      projectName: string,primaryGenres: string[],corePremise: string,movieFormat: string,durationUnit: number,existingAudience?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateTargetAudience",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"movieFormat": movieFormat,"durationUnit": durationUnit,"existingAudience": existingAudience?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTone(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,existingTone?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateTone",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"existingTone": existingTone?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}