/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, Collector } from "@boundaryml/baml"
import { toBamlError, BamlStream, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {Act, ActStructure, AdaptiveAct, Character, CharacterArc, CharacterDevelopmentDetails, CharacterDevelopmentResponse, CharacterGenerationMetadata, CharacterPsychology, CharacterQualityMetrics, CharacterRelationship, DialogueVoice, InitialStoryResponse, NarrativeStructure, PhysicalDescription, ProjectFieldsResponse, QualityAssessment, QualityBreakdown, QualityMetric, QualityMetrics, SaveTheCatBeat, SequenceStructure, StoryBeat, StoryStructureResponse, StructureValidationResponse, Subplot} from "./types"
import type TypeBuilder from "./type_builder"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
}

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private streamClient: BamlStreamClient
  private httpRequest: AsyncHttpRequest
  private httpStreamRequest: AsyncHttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  get stream() {
    return this.streamClient
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  async AnalyzeStoryStructure(
      storyContent: string,projectName: string,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],targetAudience: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<types.StoryStructureResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "AnalyzeStoryStructure",
        {
          "storyContent": storyContent,"projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"targetAudience": targetAudience
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.StoryStructureResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async DevelopCharacters(
      storyContent: string,projectName: string,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],targetAudience: string[],characterArcs: string[],storyBeats: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<types.CharacterDevelopmentResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "DevelopCharacters",
        {
          "storyContent": storyContent,"projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"targetAudience": targetAudience,"characterArcs": characterArcs,"storyBeats": storyBeats
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.CharacterDevelopmentResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async EnhanceCharacterProfiles(
      existingCharacters: string[],storyContent: string,focusAreas: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<types.CharacterDevelopmentResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "EnhanceCharacterProfiles",
        {
          "existingCharacters": existingCharacters,"storyContent": storyContent,"focusAreas": focusAreas
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.CharacterDevelopmentResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async EnhanceStory(
      currentStory: string,focusArea: string,targetMetrics: string[],currentQuality: types.QualityMetrics,
      __baml_options__?: BamlCallOptions
  ): Promise<types.InitialStoryResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "EnhanceStory",
        {
          "currentStory": currentStory,"focusArea": focusArea,"targetMetrics": targetMetrics,"currentQuality": currentQuality
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.InitialStoryResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async EnhanceStoryStructure(
      currentStructure: string,storyContent: string,focusAreas: string[],targetQualityScore: number,
      __baml_options__?: BamlCallOptions
  ): Promise<types.StoryStructureResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "EnhanceStoryStructure",
        {
          "currentStructure": currentStructure,"storyContent": storyContent,"focusAreas": focusAreas,"targetQualityScore": targetQualityScore
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.StoryStructureResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateAllProjectFields(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,primaryGenres?: string[] | null,corePremise?: string | null,targetAudience?: string[] | null,tone?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<types.ProjectFieldsResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateAllProjectFields",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingTitle": existingTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null,"primaryGenres": primaryGenres?? null,"corePremise": corePremise?? null,"targetAudience": targetAudience?? null,"tone": tone?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.ProjectFieldsResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateInitialStory(
      projectName: string,projectTitle?: string | null,shortDescription?: string | null,longDescription?: string | null,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],corePremise: string,targetAudience: string[],tone: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<types.InitialStoryResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateInitialStory",
        {
          "projectName": projectName,"projectTitle": projectTitle?? null,"shortDescription": shortDescription?? null,"longDescription": longDescription?? null,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"tone": tone
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.InitialStoryResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateLongDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateLongDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"projectTitle": projectTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateMood(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,selectedTones?: string[] | null,existingMood?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateMood",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"selectedTones": selectedTones?? null,"existingMood": existingMood?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GeneratePrimaryGenres(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingGenres?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GeneratePrimaryGenres",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingGenres": existingGenres?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateProjectTitle(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateProjectTitle",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"existingTitle": existingTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateShortDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateShortDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"projectTitle": projectTitle?? null,"existingShortDescription": existingShortDescription?? null,"existingLongDescription": existingLongDescription?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateSimpleCorePremise(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,primaryGenres: string[],existingPremise?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateSimpleCorePremise",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series?? null,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"existingPremise": existingPremise?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateStoryWithContext(
      projectData: string,additionalContext?: string | null,focusAreas?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<types.InitialStoryResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateStoryWithContext",
        {
          "projectData": projectData,"additionalContext": additionalContext?? null,"focusAreas": focusAreas?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.InitialStoryResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTargetAudience(
      projectName: string,primaryGenres: string[],corePremise: string,movieFormat: string,durationUnit: number,existingAudience?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateTargetAudience",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"movieFormat": movieFormat,"durationUnit": durationUnit,"existingAudience": existingAudience?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTone(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,existingTone?: string[] | null,
      __baml_options__?: BamlCallOptions
  ): Promise<string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateTone",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"existingTone": existingTone?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ValidateCharacterConsistency(
      characters: string[],storyBeats: string[],storyContent: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.CharacterQualityMetrics> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "ValidateCharacterConsistency",
        {
          "characters": characters,"storyBeats": storyBeats,"storyContent": storyContent
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.CharacterQualityMetrics
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ValidateStructureForScreenplay(
      storyStructure: string,targetDuration: number,movieFormat: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.StructureValidationResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "ValidateStructureForScreenplay",
        {
          "storyStructure": storyStructure,"targetDuration": targetDuration,"movieFormat": movieFormat
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as types.StructureValidationResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

class BamlStreamClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.bamlOptions = bamlOptions || {}
  }

  
  AnalyzeStoryStructure(
      storyContent: string,projectName: string,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],targetAudience: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.StoryStructureResponse, types.StoryStructureResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "AnalyzeStoryStructure",
        {
          "storyContent": storyContent,"projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"targetAudience": targetAudience
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.StoryStructureResponse, types.StoryStructureResponse>(
        raw,
        (a): partial_types.StoryStructureResponse => a,
        (a): types.StoryStructureResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DevelopCharacters(
      storyContent: string,projectName: string,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],targetAudience: string[],characterArcs: string[],storyBeats: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.CharacterDevelopmentResponse, types.CharacterDevelopmentResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "DevelopCharacters",
        {
          "storyContent": storyContent,"projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"targetAudience": targetAudience,"characterArcs": characterArcs,"storyBeats": storyBeats
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.CharacterDevelopmentResponse, types.CharacterDevelopmentResponse>(
        raw,
        (a): partial_types.CharacterDevelopmentResponse => a,
        (a): types.CharacterDevelopmentResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  EnhanceCharacterProfiles(
      existingCharacters: string[],storyContent: string,focusAreas: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.CharacterDevelopmentResponse, types.CharacterDevelopmentResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "EnhanceCharacterProfiles",
        {
          "existingCharacters": existingCharacters,"storyContent": storyContent,"focusAreas": focusAreas
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.CharacterDevelopmentResponse, types.CharacterDevelopmentResponse>(
        raw,
        (a): partial_types.CharacterDevelopmentResponse => a,
        (a): types.CharacterDevelopmentResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  EnhanceStory(
      currentStory: string,focusArea: string,targetMetrics: string[],currentQuality: types.QualityMetrics,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.InitialStoryResponse, types.InitialStoryResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "EnhanceStory",
        {
          "currentStory": currentStory,"focusArea": focusArea,"targetMetrics": targetMetrics,"currentQuality": currentQuality
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.InitialStoryResponse, types.InitialStoryResponse>(
        raw,
        (a): partial_types.InitialStoryResponse => a,
        (a): types.InitialStoryResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  EnhanceStoryStructure(
      currentStructure: string,storyContent: string,focusAreas: string[],targetQualityScore: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.StoryStructureResponse, types.StoryStructureResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "EnhanceStoryStructure",
        {
          "currentStructure": currentStructure,"storyContent": storyContent,"focusAreas": focusAreas,"targetQualityScore": targetQualityScore
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.StoryStructureResponse, types.StoryStructureResponse>(
        raw,
        (a): partial_types.StoryStructureResponse => a,
        (a): types.StoryStructureResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateAllProjectFields(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,primaryGenres?: string[] | null,corePremise?: string | null,targetAudience?: string[] | null,tone?: string[] | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.ProjectFieldsResponse, types.ProjectFieldsResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateAllProjectFields",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series ?? null,"durationUnit": durationUnit,"existingTitle": existingTitle ?? null,"existingShortDescription": existingShortDescription ?? null,"existingLongDescription": existingLongDescription ?? null,"primaryGenres": primaryGenres ?? null,"corePremise": corePremise ?? null,"targetAudience": targetAudience ?? null,"tone": tone ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.ProjectFieldsResponse, types.ProjectFieldsResponse>(
        raw,
        (a): partial_types.ProjectFieldsResponse => a,
        (a): types.ProjectFieldsResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateInitialStory(
      projectName: string,projectTitle?: string | null,shortDescription?: string | null,longDescription?: string | null,movieFormat: string,movieStyle: string,durationUnit: number,primaryGenres: string[],corePremise: string,targetAudience: string[],tone: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.InitialStoryResponse, types.InitialStoryResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateInitialStory",
        {
          "projectName": projectName,"projectTitle": projectTitle ?? null,"shortDescription": shortDescription ?? null,"longDescription": longDescription ?? null,"movieFormat": movieFormat,"movieStyle": movieStyle,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"tone": tone
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.InitialStoryResponse, types.InitialStoryResponse>(
        raw,
        (a): partial_types.InitialStoryResponse => a,
        (a): types.InitialStoryResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateLongDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateLongDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series ?? null,"durationUnit": durationUnit,"projectTitle": projectTitle ?? null,"existingShortDescription": existingShortDescription ?? null,"existingLongDescription": existingLongDescription ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateMood(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,selectedTones?: string[] | null,existingMood?: string[] | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string[], string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateMood",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"selectedTones": selectedTones ?? null,"existingMood": existingMood ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string[], string[]>(
        raw,
        (a): string[] => a,
        (a): string[] => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GeneratePrimaryGenres(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingGenres?: string[] | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string[], string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GeneratePrimaryGenres",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series ?? null,"durationUnit": durationUnit,"existingGenres": existingGenres ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string[], string[]>(
        raw,
        (a): string[] => a,
        (a): string[] => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateProjectTitle(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,existingTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateProjectTitle",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series ?? null,"durationUnit": durationUnit,"existingTitle": existingTitle ?? null,"existingShortDescription": existingShortDescription ?? null,"existingLongDescription": existingLongDescription ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateShortDescription(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,projectTitle?: string | null,existingShortDescription?: string | null,existingLongDescription?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateShortDescription",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series ?? null,"durationUnit": durationUnit,"projectTitle": projectTitle ?? null,"existingShortDescription": existingShortDescription ?? null,"existingLongDescription": existingLongDescription ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSimpleCorePremise(
      projectName: string,movieFormat: string,movieStyle: string,series?: string | null,durationUnit: number,primaryGenres: string[],existingPremise?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateSimpleCorePremise",
        {
          "projectName": projectName,"movieFormat": movieFormat,"movieStyle": movieStyle,"series": series ?? null,"durationUnit": durationUnit,"primaryGenres": primaryGenres,"existingPremise": existingPremise ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateStoryWithContext(
      projectData: string,additionalContext?: string | null,focusAreas?: string[] | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.InitialStoryResponse, types.InitialStoryResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateStoryWithContext",
        {
          "projectData": projectData,"additionalContext": additionalContext ?? null,"focusAreas": focusAreas ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.InitialStoryResponse, types.InitialStoryResponse>(
        raw,
        (a): partial_types.InitialStoryResponse => a,
        (a): types.InitialStoryResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateTargetAudience(
      projectName: string,primaryGenres: string[],corePremise: string,movieFormat: string,durationUnit: number,existingAudience?: string[] | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string[], string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateTargetAudience",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"movieFormat": movieFormat,"durationUnit": durationUnit,"existingAudience": existingAudience ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string[], string[]>(
        raw,
        (a): string[] => a,
        (a): string[] => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateTone(
      projectName: string,primaryGenres: string[],corePremise: string,targetAudience: string[],movieStyle: string,existingTone?: string[] | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<string[], string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateTone",
        {
          "projectName": projectName,"primaryGenres": primaryGenres,"corePremise": corePremise,"targetAudience": targetAudience,"movieStyle": movieStyle,"existingTone": existingTone ?? null
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<string[], string[]>(
        raw,
        (a): string[] => a,
        (a): string[] => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidateCharacterConsistency(
      characters: string[],storyBeats: string[],storyContent: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.CharacterQualityMetrics, types.CharacterQualityMetrics> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "ValidateCharacterConsistency",
        {
          "characters": characters,"storyBeats": storyBeats,"storyContent": storyContent
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.CharacterQualityMetrics, types.CharacterQualityMetrics>(
        raw,
        (a): partial_types.CharacterQualityMetrics => a,
        (a): types.CharacterQualityMetrics => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidateStructureForScreenplay(
      storyStructure: string,targetDuration: number,movieFormat: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[], env?: Record<string, string | undefined> }
  ): BamlStream<partial_types.StructureValidationResponse, types.StructureValidationResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "ValidateStructureForScreenplay",
        {
          "storyStructure": storyStructure,"targetDuration": targetDuration,"movieFormat": movieFormat
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return new BamlStream<partial_types.StructureValidationResponse, types.StructureValidationResponse>(
        raw,
        (a): partial_types.StructureValidationResponse => a,
        (a): types.StructureValidationResponse => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)