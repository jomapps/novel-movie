/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Act {
  setup?: string | null
  incitingIncident?: string | null
  plotPoint1?: string | null
  confrontation?: string | null
  midpoint?: string | null
  plotPoint2?: string | null
  climax?: string | null
  fallingAction?: string | null
  resolution?: string | null
  duration: number
  
}

export interface ActStructure {
  act1: Act
  act2: Act
  act3: Act
  
}

export interface CharacterArc {
  characterName?: string | null
  character?: string | null
  arcDescription?: string | null
  startingState?: string | null
  startState?: string | null
  endingState?: string | null
  endState?: string | null
  transformationProcess?: string | null
  transformation?: string | null
  keyMoments: string[]
  
}

export interface InitialStoryResponse {
  storyContent: string
  qualityMetrics: QualityMetrics
  generationNotes: string
  
}

export interface ProjectFieldsResponse {
  projectTitle?: string | null
  shortDescription?: string | null
  longDescription?: string | null
  
}

export interface QualityAssessment {
  overallScore: number
  breakdown?: QualityBreakdown | null
  
}

export interface QualityBreakdown {
  clearThreeActProgression?: QualityMetric | null
  strongCharacterArcs?: QualityMetric | null
  compellingStoryBeats?: QualityMetric | null
  effectiveSubplotIntegration?: QualityMetric | null
  cinematicPotential?: QualityMetric | null
  
}

export interface QualityMetric {
  score: number
  justification?: string | null
  
}

export interface QualityMetrics {
  overallQuality: number
  structureScore: number
  characterDepth: number
  coherenceScore: number
  conflictTension: number
  dialogueQuality: number
  genreAlignment: number
  audienceEngagement: number
  visualStorytelling: number
  productionReadiness: number
  
}

export interface StoryBeat {
  beatId?: number | null
  beat: string
  timestamp?: string | null
  timing?: number | null
  description: string
  charactersPresent?: string[] | null
  characters?: string[] | null
  emotionalTone: string
  
}

export interface StoryStructureResponse {
  actStructure?: ActStructure | null
  threeActStructure?: ActStructure | null
  storyBeats: StoryBeat[]
  characterArcs: CharacterArc[]
  subplots: Subplot[]
  qualityScore?: number | null
  qualityAssessment?: QualityAssessment | null
  generationNotes?: string | null
  
}

export interface StructureValidationResponse {
  isReady: boolean
  overallScore: number
  strengths: string[]
  weaknesses: string[]
  recommendations: string[]
  criticalIssues: string[]
  
}

export interface Subplot {
  subplotName?: string | null
  name?: string | null
  description: string
  resolution: string
  charactersInvolved?: string[] | null
  involvedCharacters?: string[] | null
  
}
