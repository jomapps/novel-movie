/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  Act,  ActStructure,  CharacterArc,  InitialStoryResponse,  ProjectFieldsResponse,  QualityAssessment,  QualityBreakdown,  QualityMetric,  QualityMetrics,  StoryBeat,  StoryStructureResponse,  StructureValidationResponse,  Subplot } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface Act {
      setup?: string | null
      incitingIncident?: string | null
      plotPoint1?: string | null
      confrontation?: string | null
      midpoint?: string | null
      plotPoint2?: string | null
      climax?: string | null
      fallingAction?: string | null
      resolution?: string | null
      duration?: number | null
    }
    export interface ActStructure {
      act1?: Act | null
      act2?: Act | null
      act3?: Act | null
    }
    export interface CharacterArc {
      characterName?: string | null
      character?: string | null
      arcDescription?: string | null
      startingState?: string | null
      startState?: string | null
      endingState?: string | null
      endState?: string | null
      transformationProcess?: string | null
      transformation?: string | null
      keyMoments: string[]
    }
    export interface InitialStoryResponse {
      storyContent?: string | null
      qualityMetrics?: QualityMetrics | null
      generationNotes?: string | null
    }
    export interface ProjectFieldsResponse {
      projectTitle?: string | null
      shortDescription?: string | null
      longDescription?: string | null
    }
    export interface QualityAssessment {
      overallScore?: number | null
      breakdown?: QualityBreakdown | null
    }
    export interface QualityBreakdown {
      clearThreeActProgression?: QualityMetric | null
      strongCharacterArcs?: QualityMetric | null
      compellingStoryBeats?: QualityMetric | null
      effectiveSubplotIntegration?: QualityMetric | null
      cinematicPotential?: QualityMetric | null
    }
    export interface QualityMetric {
      score?: number | null
      justification?: string | null
    }
    export interface QualityMetrics {
      overallQuality?: number | null
      structureScore?: number | null
      characterDepth?: number | null
      coherenceScore?: number | null
      conflictTension?: number | null
      dialogueQuality?: number | null
      genreAlignment?: number | null
      audienceEngagement?: number | null
      visualStorytelling?: number | null
      productionReadiness?: number | null
    }
    export interface StoryBeat {
      beatId?: number | null
      beat?: string | null
      timestamp?: string | null
      timing?: number | null
      description?: string | null
      charactersPresent?: string[] | null
      characters?: string[] | null
      emotionalTone?: string | null
    }
    export interface StoryStructureResponse {
      actStructure?: ActStructure | null
      threeActStructure?: ActStructure | null
      storyBeats: StoryBeat[]
      characterArcs: CharacterArc[]
      subplots: Subplot[]
      qualityScore?: number | null
      qualityAssessment?: QualityAssessment | null
      generationNotes?: string | null
    }
    export interface StructureValidationResponse {
      isReady?: boolean | null
      overallScore?: number | null
      strengths: string[]
      weaknesses: string[]
      recommendations: string[]
      criticalIssues: string[]
    }
    export interface Subplot {
      subplotName?: string | null
      name?: string | null
      description?: string | null
      resolution?: string | null
      charactersInvolved?: string[] | null
      involvedCharacters?: string[] | null
    }
}