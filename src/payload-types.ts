/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    projects: Project;
    'movie-formats': MovieFormat;
    'movie-styles': MovieStyle;
    series: Series;
    stories: Story;
    'story-structures': StoryStructure;
    'character-references': CharacterReference;
    'fundamental-data': FundamentalDatum;
    genres: Genre;
    'audience-demographics': AudienceDemographic;
    'tone-options': ToneOption;
    'central-themes': CentralTheme;
    'mood-descriptors': MoodDescriptor;
    'cinematography-styles': CinematographyStyle;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    'movie-formats': MovieFormatsSelect<false> | MovieFormatsSelect<true>;
    'movie-styles': MovieStylesSelect<false> | MovieStylesSelect<true>;
    series: SeriesSelect<false> | SeriesSelect<true>;
    stories: StoriesSelect<false> | StoriesSelect<true>;
    'story-structures': StoryStructuresSelect<false> | StoryStructuresSelect<true>;
    'character-references': CharacterReferencesSelect<false> | CharacterReferencesSelect<true>;
    'fundamental-data': FundamentalDataSelect<false> | FundamentalDataSelect<true>;
    genres: GenresSelect<false> | GenresSelect<true>;
    'audience-demographics': AudienceDemographicsSelect<false> | AudienceDemographicsSelect<true>;
    'tone-options': ToneOptionsSelect<false> | ToneOptionsSelect<true>;
    'central-themes': CentralThemesSelect<false> | CentralThemesSelect<true>;
    'mood-descriptors': MoodDescriptorsSelect<false> | MoodDescriptorsSelect<true>;
    'cinematography-styles': CinematographyStylesSelect<false> | CinematographyStylesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  slug?: string | null;
  /**
   * Project identifier/name provided by user (e.g., "Adventure Story 1", "Mystery Episode 3")
   */
  name: string;
  /**
   * The actual title of the movie/episode (user-provided or auto-generated by frontend)
   */
  projectTitle?: string | null;
  /**
   * Brief summary of the project (user-provided or auto-generated by frontend)
   */
  shortDescription?: string | null;
  /**
   * Detailed description or synopsis of the project (user-provided or auto-generated by frontend)
   */
  longDescription?: string | null;
  /**
   * The format type for this project (Short Film, Feature Film, Series, etc.)
   */
  movieFormat: string | MovieFormat;
  /**
   * Associated series (only required/visible when movieFormat is "Series")
   */
  series?: (string | null) | Series;
  /**
   * Visual/artistic style for AI generation
   */
  movieStyle: string | MovieStyle;
  /**
   * Current status of the project workflow
   */
  status: 'draft' | 'story-in-progress' | 'story-completed' | 'in-production' | 'completed' | 'archived';
  /**
   * Unit of measurement for the suggested duration in minutes
   */
  durationUnit: number;
  /**
   * Select up to 3 genres in order of importance - drives story structure and style
   */
  primaryGenres?: (string | Genre)[] | null;
  /**
   * The central story concept and main conflict - what is this story about? (50-500 words)
   */
  corePremise?: string | null;
  /**
   * Select primary demographic groups this story should appeal to
   */
  targetAudience?: (string | AudienceDemographic)[] | null;
  /**
   * Select 1-2 tones that define how the story is told (narrative approach)
   */
  tone?: (string | ToneOption)[] | null;
  /**
   * Select 1-2 moods that define the emotional atmosphere and feeling
   */
  mood?: (string | MoodDescriptor)[] | null;
  /**
   * Container for AI-generated content and assets
   */
  generatedContent?: {
    /**
     * Generated screenplay/script content
     */
    script?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Generated scenes with text and media references
     */
    scenes?:
      | {
          /**
           * Sequential scene number
           */
          sceneNumber: number;
          /**
           * Scene description or script content
           */
          description?: string | null;
          /**
           * Media assets associated with this scene
           */
          media?: (string | Media)[] | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Final assembled video file
     */
    finalVideo?: (string | null) | Media;
    /**
     * All generated assets for this project
     */
    assets?: (string | Media)[] | null;
  };
  /**
   * Associated story with iterative enhancements for this project
   */
  story?: (string | null) | Story;
  /**
   * Workflow progress tracking
   */
  workflowStatus?: {
    /**
     * Current workflow step
     */
    currentStep?:
      | (
          | 'project-setup'
          | 'story-generation'
          | 'character-development'
          | 'scene-planning'
          | 'media-generation'
          | 'post-production'
          | 'final-review'
          | 'completed'
        )
      | null;
    /**
     * List of completed workflow steps with timestamps
     */
    completedSteps?:
      | {
          step: string;
          completedAt: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Last time this project was worked on
     */
    lastActivity?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movie-formats".
 */
export interface MovieFormat {
  id: string;
  /**
   * Display name of the movie format (e.g., "Short Film", "Feature Film")
   */
  name: string;
  /**
   * URL-friendly identifier for the format
   */
  slug: string;
  /**
   * Brief description of the movie format and its characteristics
   */
  description?: string | null;
  /**
   * Suggested duration for this format
   */
  suggestedDuration: number;
  /**
   * Whether this format is available for new projects
   */
  isActive: boolean;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "series".
 */
export interface Series {
  id: string;
  /**
   * The name/title of the series (e.g., "Mystery Chronicles", "Tech Adventures")
   */
  name: string;
  /**
   * Brief description of the series concept, theme, or storyline
   */
  description?: string | null;
  /**
   * Whether this series is active and available for new episodes
   */
  isActive: boolean;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movie-styles".
 */
export interface MovieStyle {
  id: string;
  /**
   * Display name of the movie style (e.g., "Cinematic Realism", "Animation")
   */
  name: string;
  /**
   * URL-friendly identifier for the style
   */
  slug: string;
  /**
   * Detailed description of the visual style and its characteristics
   */
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres".
 */
export interface Genre {
  id: string;
  /**
   * Genre name (e.g., "Action", "Drama", "Comedy")
   */
  name: string;
  /**
   * URL-friendly identifier
   */
  slug: string;
  /**
   * Brief description of the genre and its characteristics
   */
  description: string;
  /**
   * Classification of genre type
   */
  category: 'primary' | 'sub' | 'hybrid';
  /**
   * Parent genre for sub-genres
   */
  parentGenre?: (string | null) | Genre;
  narrativeElements?: {
    /**
     * Common narrative structure for this genre
     */
    typicalStructure?: string | null;
    /**
     * Typical character types found in this genre
     */
    characterArchetypes?: string | null;
    /**
     * Themes commonly explored in this genre
     */
    commonThemes?: string | null;
    /**
     * Visual and cinematographic conventions
     */
    visualStyle?: string | null;
  };
  audienceAppeal?: {
    /**
     * Main audience demographics for this genre
     */
    primaryDemographics?: string | null;
    /**
     * What emotions this genre typically evokes
     */
    emotionalAppeal?: string | null;
  };
  productionConsiderations?: {
    /**
     * Typical budget requirements for this genre
     */
    budgetRange?: ('low' | 'medium' | 'high' | 'variable') | null;
    /**
     * Special technical or production requirements
     */
    technicalRequirements?: string | null;
  };
  /**
   * Whether this genre is available for selection
   */
  isActive?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  sortOrder?: number | null;
  /**
   * Tags to help AI understand this genre for content generation
   */
  aiGenerationTags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audience-demographics".
 */
export interface AudienceDemographic {
  id: string;
  /**
   * Demographic group name (e.g., "Young Adults", "Families with Children")
   */
  name: string;
  slug: string;
  /**
   * Description of this demographic group and their characteristics
   */
  description: string;
  /**
   * Type of demographic classification
   */
  category: 'age' | 'geographic' | 'cultural' | 'socioeconomic' | 'lifestyle';
  ageRange?: {
    minAge?: number | null;
    maxAge?: number | null;
    ratingGuideline?: ('G' | 'PG' | 'PG-13' | 'R' | 'NC-17') | null;
  };
  characteristics?: {
    /**
     * Common interests and hobbies of this demographic
     */
    interests?: string | null;
    /**
     * How this demographic typically consumes media
     */
    mediaConsumption?: string | null;
    /**
     * Core values and beliefs important to this group
     */
    values?: string | null;
    /**
     * Lifestyle patterns and behaviors
     */
    lifestyle?: string | null;
  };
  contentPreferences?: {
    /**
     * Genres that typically appeal to this demographic
     */
    preferredGenres?: (string | Genre)[] | null;
    contentComplexity?: ('simple' | 'moderate' | 'complex' | 'variable') | null;
    attentionSpan?: ('short' | 'medium' | 'long' | 'variable') | null;
    /**
     * Types of emotional content this demographic responds to
     */
    emotionalPreferences?: string | null;
  };
  marketingConsiderations?: {
    /**
     * Best marketing channels to reach this demographic
     */
    primaryChannels?: string | null;
    /**
     * Effective messaging tone and approach
     */
    messagingTone?: string | null;
    /**
     * Key influencers or opinion leaders for this group
     */
    influencers?: string | null;
  };
  /**
   * Whether this demographic is available for selection
   */
  isActive?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  sortOrder?: number | null;
  /**
   * Tags to help AI understand this demographic for content generation
   */
  aiGenerationTags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tone-options".
 */
export interface ToneOption {
  id: string;
  /**
   * Tone name (e.g., "Serious", "Comedic", "Dramatic")
   */
  name: string;
  slug: string;
  /**
   * Description of this tone and its characteristics
   */
  description: string;
  /**
   * Category of tone classification
   */
  category: 'emotional' | 'stylistic' | 'narrative' | 'atmospheric';
  /**
   * Intensity level of this tone
   */
  intensity: 'subtle' | 'moderate' | 'strong' | 'intense';
  narrativeImpact?: {
    /**
     * How this tone affects dialogue and character speech
     */
    dialogueStyle?: string | null;
    /**
     * How this tone affects story pacing and rhythm
     */
    pacingInfluence?: string | null;
    /**
     * How characters typically behave with this tone
     */
    characterBehavior?: string | null;
    /**
     * How conflicts are presented and resolved
     */
    conflictStyle?: string | null;
  };
  visualElements?: {
    /**
     * Typical color schemes associated with this tone
     */
    colorPalette?: string | null;
    /**
     * Lighting approaches that support this tone
     */
    lightingStyle?: string | null;
    /**
     * Camera techniques that enhance this tone
     */
    cameraWork?: string | null;
    /**
     * Editing approaches that support this tone
     */
    editingStyle?: string | null;
  };
  audioElements?: {
    /**
     * Musical styles and approaches that support this tone
     */
    musicStyle?: string | null;
    /**
     * Sound design elements that enhance this tone
     */
    soundDesign?: string | null;
    /**
     * Voice acting and delivery style for this tone
     */
    voiceDirection?: string | null;
  };
  /**
   * Genres that commonly use this tone
   */
  genreCompatibility?: (string | Genre)[] | null;
  audienceResponse?: {
    /**
     * How audiences typically respond emotionally to this tone
     */
    emotionalEffect?: string | null;
    engagementLevel?: ('passive' | 'moderate' | 'active' | 'intense') | null;
    /**
     * Demographics that typically respond well to this tone
     */
    demographicAppeal?: (string | AudienceDemographic)[] | null;
  };
  /**
   * Example films that exemplify this tone
   */
  examples?:
    | {
        title: string;
        year?: number | null;
        /**
         * How this example demonstrates the tone
         */
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Whether this tone is available for selection
   */
  isActive?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  sortOrder?: number | null;
  /**
   * Tags to help AI understand this tone for content generation
   */
  aiGenerationTags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mood-descriptors".
 */
export interface MoodDescriptor {
  id: string;
  /**
   * Mood descriptor (e.g., "Optimistic", "Melancholic", "Tense")
   */
  name: string;
  slug: string;
  /**
   * Description of this mood and its emotional characteristics
   */
  description: string;
  category: 'positive' | 'negative' | 'neutral' | 'complex';
  intensity: 'subtle' | 'moderate' | 'strong' | 'overwhelming';
  /**
   * How this mood affects audience emotional response
   */
  emotionalImpact?: string | null;
  visualElements?: {
    /**
     * Colors that evoke this mood
     */
    colorAssociations?: string | null;
    /**
     * Lighting techniques that create this mood
     */
    lightingStyle?: string | null;
    /**
     * Visual composition approaches for this mood
     */
    compositionStyle?: string | null;
  };
  audioElements?: {
    /**
     * Musical styles that support this mood
     */
    musicStyle?: string | null;
    /**
     * Sound design elements that enhance this mood
     */
    soundDesign?: string | null;
  };
  /**
   * Genres that commonly use this mood
   */
  genreCompatibility?: (string | Genre)[] | null;
  isActive?: boolean | null;
  sortOrder?: number | null;
  aiGenerationTags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stories".
 */
export interface Story {
  id: string;
  /**
   * Associated project for this story
   */
  project: string | Project;
  /**
   * Auto-populated from project name
   */
  projectName?: string | null;
  /**
   * Current version of the story content
   */
  currentContent: string;
  /**
   * Current enhancement step (1-12)
   */
  currentStep: number;
  /**
   * Current status of story development
   */
  status: 'in-progress' | 'paused' | 'completed' | 'needs-review' | 'approved';
  qualityMetrics?: {
    /**
     * Story structure quality (0-100)
     */
    structureScore?: number | null;
    /**
     * Character development quality (0-100)
     */
    characterDepth?: number | null;
    /**
     * Story coherence and logic (0-100)
     */
    coherenceScore?: number | null;
    /**
     * Dramatic tension and conflict (0-100)
     */
    conflictTension?: number | null;
    /**
     * Dialogue quality and character voice (0-100)
     */
    dialogueQuality?: number | null;
    /**
     * Genre-specific feature effectiveness (0-100)
     */
    genreAlignment?: number | null;
    /**
     * Target audience appropriateness (0-100)
     */
    audienceEngagement?: number | null;
    /**
     * Cinematic potential and visual descriptions (0-100)
     */
    visualStorytelling?: number | null;
    /**
     * Production viability and format compliance (0-100)
     */
    productionReadiness?: number | null;
    /**
     * Composite quality score (0-100)
     */
    overallQuality?: number | null;
  };
  /**
   * History of all enhancement steps performed
   */
  enhancementHistory?:
    | {
        /**
         * Enhancement step number (1-12)
         */
        stepNumber: number;
        stepName:
          | 'initial-generation'
          | 'structure-enhancement'
          | 'character-enhancement'
          | 'coherence-enhancement'
          | 'conflict-enhancement'
          | 'dialogue-enhancement'
          | 'genre-enhancement'
          | 'audience-optimization'
          | 'visual-enhancement'
          | 'final-polish';
        /**
         * When this step started
         */
        startTime: string;
        /**
         * When this step completed
         */
        endTime?: string | null;
        /**
         * Processing time in seconds
         */
        processingTime?: number | null;
        /**
         * Story content before this enhancement
         */
        contentBefore?: string | null;
        /**
         * Story content after this enhancement
         */
        contentAfter?: string | null;
        /**
         * Quality metrics before enhancement
         */
        qualityBefore?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        /**
         * Quality metrics after enhancement
         */
        qualityAfter?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        /**
         * List of specific improvements made in this step
         */
        improvementsMade?:
          | {
              improvement: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Whether user approved this enhancement
         */
        userApproved?: boolean | null;
        /**
         * AI model used for this enhancement
         */
        aiModel?: string | null;
        /**
         * Summary of changes made in this step
         */
        changesSummary?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Genre-specific quality metrics (e.g., humor ratio for comedy)
   */
  genreSpecificMetrics?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  workflowSettings?: {
    /**
     * Workflow execution mode
     */
    mode?: ('auto' | 'manual' | 'custom') | null;
    /**
     * Stop enhancement when overall quality reaches this score
     */
    qualityThreshold?: number | null;
    /**
     * Maximum number of enhancement cycles
     */
    maxIterations?: number | null;
    /**
     * Steps to skip during enhancement
     */
    skipSteps?:
      | {
          stepNumber?: number | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Steps to repeat if quality targets not met
     */
    repeatSteps?:
      | {
          stepNumber?: number | null;
          id?: string | null;
        }[]
      | null;
  };
  progressTracking?: {
    /**
     * Estimated time remaining in seconds
     */
    estimatedTimeRemaining?: number | null;
    /**
     * Overall completion percentage
     */
    completionPercentage?: number | null;
    /**
     * Last successfully processed step
     */
    lastProcessedStep?: number | null;
    /**
     * Total processing time in seconds
     */
    totalProcessingTime?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "story-structures".
 */
export interface StoryStructure {
  id: string;
  /**
   * Associated project for this story structure
   */
  project: string | Project;
  /**
   * Auto-populated from project name
   */
  projectName?: string | null;
  /**
   * Associated story that this structure is based on
   */
  story: string | Story;
  /**
   * Type of narrative structure used based on duration
   */
  narrativeStructureType?:
    | (
        | 'single-moment'
        | 'compressed-three-act'
        | 'traditional-three-act'
        | 'five-act'
        | 'save-the-cat'
        | 'eight-sequence'
      )
    | null;
  /**
   * Duration-adaptive narrative structure data
   */
  adaptiveStructure?: {
    /**
     * Structure type identifier
     */
    structureType?: string | null;
    /**
     * Adaptive acts based on structure type
     */
    acts?:
      | {
          actNumber: number;
          name: string;
          description?: string | null;
          /**
           * Duration in minutes
           */
          duration?: number | null;
          keyEvents?:
            | {
                event: string;
                id?: string | null;
              }[]
            | null;
          purpose?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Eight-sequence structure data (for extended formats)
     */
    sequences?:
      | {
          sequenceNumber: number;
          name: string;
          description?: string | null;
          duration?: number | null;
          miniMovieArc?: string | null;
          keyBeats?:
            | {
                beat: string;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Save the Cat beat sheet data (for feature films)
     */
    saveTheCatBeats?:
      | {
          beatNumber: number;
          name: string;
          description?: string | null;
          pageNumber?: number | null;
          /**
           * Timing in minutes
           */
          timing?: number | null;
          purpose?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Legacy three-act structure (for backward compatibility)
   */
  actStructure?: {
    act1?: {
      /**
       * Opening setup and world establishment
       */
      setup?: string | null;
      /**
       * The event that sets the story in motion
       */
      incitingIncident?: string | null;
      /**
       * Major turning point that launches Act 2
       */
      plotPoint1?: string | null;
      /**
       * Estimated duration in minutes
       */
      duration?: number | null;
    };
    act2?: {
      /**
       * Main conflict and obstacles
       */
      confrontation?: string | null;
      /**
       * Major revelation or turning point at story center
       */
      midpoint?: string | null;
      /**
       * Crisis that launches the final act
       */
      plotPoint2?: string | null;
      /**
       * Estimated duration in minutes
       */
      duration?: number | null;
    };
    act3?: {
      /**
       * Final confrontation and peak tension
       */
      climax?: string | null;
      /**
       * Immediate aftermath of the climax
       */
      fallingAction?: string | null;
      /**
       * Final resolution and new equilibrium
       */
      resolution?: string | null;
      /**
       * Estimated duration in minutes
       */
      duration?: number | null;
    };
  };
  /**
   * Detailed story beats and key moments
   */
  storyBeats?:
    | {
        /**
         * Name or title of this story beat
         */
        beat: string;
        /**
         * Approximate timing in minutes from start
         */
        timing?: number | null;
        /**
         * Detailed description of what happens in this beat
         */
        description: string;
        /**
         * Characters present in this beat
         */
        characters?:
          | {
              character?: string | null;
              id?: string | null;
            }[]
          | null;
        emotionalTone?:
          | ('tense' | 'dramatic' | 'comedic' | 'romantic' | 'action' | 'suspenseful' | 'emotional' | 'mysterious')
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Character development arcs throughout the story
   */
  characterArcs?:
    | {
        /**
         * Character name
         */
        character: string;
        /**
         * Character state at the beginning of the story
         */
        startState: string;
        /**
         * Character state at the end of the story
         */
        endState: string;
        /**
         * How and why the character changes
         */
        transformation: string;
        /**
         * Key moments in this character's arc
         */
        keyMoments?:
          | {
              moment?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Secondary storylines and subplots
   */
  subplots?:
    | {
        /**
         * Subplot name or title
         */
        name: string;
        /**
         * Detailed description of the subplot
         */
        description: string;
        /**
         * How this subplot is resolved
         */
        resolution?: string | null;
        /**
         * Characters involved in this subplot
         */
        charactersInvolved?:
          | {
              character?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Metadata about the structure generation process
   */
  generationMetadata?: {
    generatedAt?: string | null;
    /**
     * Time taken to generate structure (in seconds)
     */
    processingTime?: number | null;
    /**
     * AI-assessed quality score of the structure
     */
    qualityScore?: number | null;
    /**
     * Notes from the AI generation process
     */
    generationNotes?: string | null;
  };
  /**
   * Duration-adaptive compliance and validation data
   */
  durationCompliance?: {
    /**
     * Duration format category (Micro-format, Ultra-short, etc.)
     */
    formatCategory?: string | null;
    /**
     * Target duration in minutes
     */
    targetDuration?: number | null;
    /**
     * Whether structure meets duration format requirements
     */
    isCompliant?: boolean | null;
    /**
     * Appropriate complexity level for duration
     */
    complexityLevel?: ('minimal' | 'simple' | 'moderate' | 'complex' | 'epic') | null;
    /**
     * Format-specific constraints applied
     */
    constraints?: {
      /**
       * Maximum recommended story beats
       */
      maxStoryBeats?: number | null;
      /**
       * Maximum recommended characters
       */
      maxCharacters?: number | null;
      /**
       * Maximum recommended locations
       */
      maxLocations?: number | null;
      /**
       * Maximum recommended subplots
       */
      maxSubplots?: number | null;
      /**
       * Recommended beats per minute pacing
       */
      beatsPerMinute?: number | null;
    };
    /**
     * Actual structure metrics
     */
    actualMetrics?: {
      /**
       * Actual number of story beats
       */
      storyBeatsCount?: number | null;
      /**
       * Actual number of main characters
       */
      characterCount?: number | null;
      /**
       * Actual number of subplots
       */
      subplotCount?: number | null;
      /**
       * Actual beats per minute pacing
       */
      averageBeatsPerMinute?: number | null;
    };
    /**
     * Duration compliance warnings
     */
    warnings?:
      | {
          warning: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Recommendations for improvement
     */
    recommendations?:
      | {
          recommendation: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Format-specific pacing guidelines
     */
    pacingGuidelines?:
      | {
          guideline: string;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Current status of the story structure
   */
  status: 'generated' | 'reviewed' | 'approved' | 'needs-revision';
  updatedAt: string;
  createdAt: string;
}
/**
 * Character references linking to Character Library - Single Source Architecture
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "character-references".
 */
export interface CharacterReference {
  id: string;
  /**
   * Project this character belongs to
   */
  project: string | Project;
  /**
   * Character name as used in this specific project
   */
  projectCharacterName: string;
  /**
   * Unique Character Library ID for this character
   */
  libraryCharacterId: string;
  /**
   * Character role in this project
   */
  characterRole?: ('protagonist' | 'antagonist' | 'supporting' | 'minor') | null;
  /**
   * Character generation and setup status
   */
  generationStatus?: ('pending' | 'generated' | 'images_created' | 'complete' | 'failed') | null;
  /**
   * Character generation tracking information
   */
  generationMetadata?: {
    /**
     * When this character was generated
     */
    generatedAt?: string | null;
    /**
     * When character images were last updated
     */
    lastImageUpdate?: string | null;
    /**
     * Error message if generation failed
     */
    errorMessage?: string | null;
    /**
     * Method used to generate character (e.g., BAML DevelopCharacters)
     */
    generationMethod?: string | null;
    /**
     * AI-generated quality score for the character
     */
    qualityScore?: number | null;
    /**
     * AI-generated completeness score for the character
     */
    completeness?: number | null;
    /**
     * Status of Character Library integration
     */
    characterLibraryStatus?: string | null;
    /**
     * Full BAML response data for character generation
     */
    bamlData?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Extended story development data including themes, characters, settings, and references
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fundamental-data".
 */
export interface FundamentalDatum {
  id: string;
  /**
   * The project this fundamental data belongs to
   */
  project: string | Project;
  /**
   * Auto-populated from project name
   */
  projectName?: string | null;
  visualStyle?: {
    /**
     * Overall visual approach
     */
    cinematographyStyle?: (string | null) | CinematographyStyle;
    colorPalette?: {
      dominance?: ('warm' | 'cool' | 'balanced' | 'monochromatic') | null;
      saturation?: ('high' | 'medium' | 'low' | 'desaturated') | null;
      /**
       * Specific colors and their symbolic meaning in the story
       */
      symbolicColors?: string | null;
    };
    /**
     * Lighting approach and mood
     */
    lightingPreferences?: string | null;
    /**
     * Camera movement and framing style
     */
    cameraMovement?: string | null;
  };
  references?: {
    inspirationalMovies?:
      | {
          title?: string | null;
          year?: number | null;
          /**
           * What specific elements to emulate from this film
           */
          specificElements?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Art styles, photography, design movements that inspire the visual approach
     */
    visualReferences?: string | null;
    /**
     * Books, plays, real events that inspire the story structure or themes
     */
    narrativeReferences?: string | null;
  };
  characterArchetypes?: {
    /**
     * Primary character archetype for the main character
     */
    protagonistType?: string | null;
    /**
     * Key supporting character archetypes
     */
    supportingRoles?: string | null;
    /**
     * How characters interact and drive conflict
     */
    relationshipDynamics?: string | null;
  };
  themes?: {
    /**
     * Primary themes explored in the story
     */
    centralThemes?: (string | CentralTheme)[] | null;
    /**
     * Ethical dilemmas characters will face
     */
    moralQuestions?: string | null;
    /**
     * What should audiences feel or learn from this story?
     */
    messageTakeaway?: string | null;
  };
  setting?: {
    /**
     * When the story takes place
     */
    timePeriod?: string | null;
    /**
     * Where the story takes place
     */
    geographicSetting?: string | null;
    /**
     * Social, economic, and cultural background
     */
    socialContext?: string | null;
    /**
     * Scope and scale of the story
     */
    scale?: string | null;
  };
  pacing?: {
    /**
     * Story structure approach
     */
    narrativeStructure?: string | null;
    /**
     * Overall pacing approach
     */
    pacingStyle?: string | null;
    /**
     * Type of climax and resolution
     */
    climaxIntensity?: string | null;
  };
  contentGuidelines?: {
    /**
     * Content limitations and restrictions
     */
    contentRestrictions?: string | null;
    /**
     * Cultural considerations and sensitivities
     */
    culturalSensitivities?: string | null;
    /**
     * Educational aspects or informational content to include
     */
    educationalValue?: string | null;
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cinematography-styles".
 */
export interface CinematographyStyle {
  id: string;
  /**
   * Cinematography style name (e.g., "Realistic", "Stylized", "Documentary")
   */
  name: string;
  slug: string;
  /**
   * Description of this cinematography style and its characteristics
   */
  description: string;
  category: 'realistic' | 'stylized' | 'experimental' | 'documentary' | 'artistic';
  complexity: 'simple' | 'moderate' | 'complex' | 'highly-complex';
  technicalElements?: {
    /**
     * Typical camera movement patterns for this style
     */
    cameraMovement?: string | null;
    /**
     * How shots are typically framed and composed
     */
    framingApproach?: string | null;
    /**
     * Common lens selections and focal lengths
     */
    lensChoices?: string | null;
    /**
     * Color grading and post-production approaches
     */
    colorGrading?: string | null;
  };
  visualCharacteristics?: {
    /**
     * Lighting approaches typical of this style
     */
    lightingStyle?: string | null;
    /**
     * How depth of field is typically used
     */
    depthOfField?: string | null;
    /**
     * Overall visual texture and feel
     */
    visualTexture?: string | null;
  };
  /**
   * Genres that commonly use this cinematography style
   */
  genreCompatibility?: (string | Genre)[] | null;
  productionConsiderations?: {
    budgetRequirements?: ('low' | 'medium' | 'high' | 'variable') | null;
    /**
     * Special equipment or technical requirements
     */
    equipmentNeeds?: string | null;
    /**
     * Technical skills and expertise needed
     */
    skillRequirements?: string | null;
  };
  examples?:
    | {
        title: string;
        year?: number | null;
        /**
         * How this example demonstrates the cinematography style
         */
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  isActive?: boolean | null;
  sortOrder?: number | null;
  aiGenerationTags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "central-themes".
 */
export interface CentralTheme {
  id: string;
  /**
   * Theme name (e.g., "Love", "Redemption", "Coming of Age")
   */
  name: string;
  slug: string;
  /**
   * Detailed description of this theme and its significance
   */
  description: string;
  /**
   * Category of thematic content
   */
  category: 'relationships' | 'growth' | 'social' | 'moral' | 'existential' | 'cultural' | 'universal';
  /**
   * How universally this theme resonates across audiences
   */
  universality: 'universal' | 'broad' | 'specific' | 'niche';
  thematicElements?: {
    /**
     * Central questions this theme explores
     */
    coreQuestions?:
      | {
          question: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Types of conflicts that arise from this theme
     */
    commonConflicts?: string | null;
    /**
     * How characters typically develop when exploring this theme
     */
    characterArcs?: string | null;
    /**
     * Common ways stories resolve this thematic conflict
     */
    resolutionPatterns?: string | null;
  };
  narrativeImpact?: {
    /**
     * How this theme typically influences plot structure
     */
    plotInfluence?: string | null;
    /**
     * How this theme drives character growth and change
     */
    characterDevelopment?: string | null;
    /**
     * How this theme influences character dialogue and interactions
     */
    dialogueStyle?: string | null;
    /**
     * Common symbols and metaphors associated with this theme
     */
    symbolism?: string | null;
  };
  /**
   * Genres that commonly explore this theme
   */
  genreCompatibility?: (string | Genre)[] | null;
  audienceResonance?: {
    /**
     * How audiences typically respond emotionally to this theme
     */
    emotionalImpact?: string | null;
    /**
     * Demographics that particularly connect with this theme
     */
    targetDemographics?: (string | AudienceDemographic)[] | null;
    /**
     * Cultural factors that influence how this theme is received
     */
    culturalConsiderations?: string | null;
  };
  visualRepresentation?: {
    /**
     * Colors commonly associated with this theme
     */
    colorAssociations?: string | null;
    /**
     * Visual elements and motifs that represent this theme
     */
    visualMotifs?: string | null;
    /**
     * How this theme influences location and setting choices
     */
    settingInfluence?: string | null;
  };
  /**
   * Example films that explore this theme effectively
   */
  examples?:
    | {
        title: string;
        year?: number | null;
        genre?: (string | null) | Genre;
        /**
         * How this example explores the theme
         */
        thematicTreatment?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Other themes commonly paired with this one
   */
  relatedThemes?: (string | CentralTheme)[] | null;
  /**
   * Whether this theme is available for selection
   */
  isActive?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  sortOrder?: number | null;
  /**
   * Tags to help AI understand this theme for content generation
   */
  aiGenerationTags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'movie-formats';
        value: string | MovieFormat;
      } | null)
    | ({
        relationTo: 'movie-styles';
        value: string | MovieStyle;
      } | null)
    | ({
        relationTo: 'series';
        value: string | Series;
      } | null)
    | ({
        relationTo: 'stories';
        value: string | Story;
      } | null)
    | ({
        relationTo: 'story-structures';
        value: string | StoryStructure;
      } | null)
    | ({
        relationTo: 'character-references';
        value: string | CharacterReference;
      } | null)
    | ({
        relationTo: 'fundamental-data';
        value: string | FundamentalDatum;
      } | null)
    | ({
        relationTo: 'genres';
        value: string | Genre;
      } | null)
    | ({
        relationTo: 'audience-demographics';
        value: string | AudienceDemographic;
      } | null)
    | ({
        relationTo: 'tone-options';
        value: string | ToneOption;
      } | null)
    | ({
        relationTo: 'central-themes';
        value: string | CentralTheme;
      } | null)
    | ({
        relationTo: 'mood-descriptors';
        value: string | MoodDescriptor;
      } | null)
    | ({
        relationTo: 'cinematography-styles';
        value: string | CinematographyStyle;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  slug?: T;
  name?: T;
  projectTitle?: T;
  shortDescription?: T;
  longDescription?: T;
  movieFormat?: T;
  series?: T;
  movieStyle?: T;
  status?: T;
  durationUnit?: T;
  primaryGenres?: T;
  corePremise?: T;
  targetAudience?: T;
  tone?: T;
  mood?: T;
  generatedContent?:
    | T
    | {
        script?: T;
        scenes?:
          | T
          | {
              sceneNumber?: T;
              description?: T;
              media?: T;
              id?: T;
            };
        finalVideo?: T;
        assets?: T;
      };
  story?: T;
  workflowStatus?:
    | T
    | {
        currentStep?: T;
        completedSteps?:
          | T
          | {
              step?: T;
              completedAt?: T;
              id?: T;
            };
        lastActivity?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movie-formats_select".
 */
export interface MovieFormatsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  suggestedDuration?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movie-styles_select".
 */
export interface MovieStylesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "series_select".
 */
export interface SeriesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stories_select".
 */
export interface StoriesSelect<T extends boolean = true> {
  project?: T;
  projectName?: T;
  currentContent?: T;
  currentStep?: T;
  status?: T;
  qualityMetrics?:
    | T
    | {
        structureScore?: T;
        characterDepth?: T;
        coherenceScore?: T;
        conflictTension?: T;
        dialogueQuality?: T;
        genreAlignment?: T;
        audienceEngagement?: T;
        visualStorytelling?: T;
        productionReadiness?: T;
        overallQuality?: T;
      };
  enhancementHistory?:
    | T
    | {
        stepNumber?: T;
        stepName?: T;
        startTime?: T;
        endTime?: T;
        processingTime?: T;
        contentBefore?: T;
        contentAfter?: T;
        qualityBefore?: T;
        qualityAfter?: T;
        improvementsMade?:
          | T
          | {
              improvement?: T;
              id?: T;
            };
        userApproved?: T;
        aiModel?: T;
        changesSummary?: T;
        id?: T;
      };
  genreSpecificMetrics?: T;
  workflowSettings?:
    | T
    | {
        mode?: T;
        qualityThreshold?: T;
        maxIterations?: T;
        skipSteps?:
          | T
          | {
              stepNumber?: T;
              id?: T;
            };
        repeatSteps?:
          | T
          | {
              stepNumber?: T;
              id?: T;
            };
      };
  progressTracking?:
    | T
    | {
        estimatedTimeRemaining?: T;
        completionPercentage?: T;
        lastProcessedStep?: T;
        totalProcessingTime?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "story-structures_select".
 */
export interface StoryStructuresSelect<T extends boolean = true> {
  project?: T;
  projectName?: T;
  story?: T;
  narrativeStructureType?: T;
  adaptiveStructure?:
    | T
    | {
        structureType?: T;
        acts?:
          | T
          | {
              actNumber?: T;
              name?: T;
              description?: T;
              duration?: T;
              keyEvents?:
                | T
                | {
                    event?: T;
                    id?: T;
                  };
              purpose?: T;
              id?: T;
            };
        sequences?:
          | T
          | {
              sequenceNumber?: T;
              name?: T;
              description?: T;
              duration?: T;
              miniMovieArc?: T;
              keyBeats?:
                | T
                | {
                    beat?: T;
                    id?: T;
                  };
              id?: T;
            };
        saveTheCatBeats?:
          | T
          | {
              beatNumber?: T;
              name?: T;
              description?: T;
              pageNumber?: T;
              timing?: T;
              purpose?: T;
              id?: T;
            };
      };
  actStructure?:
    | T
    | {
        act1?:
          | T
          | {
              setup?: T;
              incitingIncident?: T;
              plotPoint1?: T;
              duration?: T;
            };
        act2?:
          | T
          | {
              confrontation?: T;
              midpoint?: T;
              plotPoint2?: T;
              duration?: T;
            };
        act3?:
          | T
          | {
              climax?: T;
              fallingAction?: T;
              resolution?: T;
              duration?: T;
            };
      };
  storyBeats?:
    | T
    | {
        beat?: T;
        timing?: T;
        description?: T;
        characters?:
          | T
          | {
              character?: T;
              id?: T;
            };
        emotionalTone?: T;
        id?: T;
      };
  characterArcs?:
    | T
    | {
        character?: T;
        startState?: T;
        endState?: T;
        transformation?: T;
        keyMoments?:
          | T
          | {
              moment?: T;
              id?: T;
            };
        id?: T;
      };
  subplots?:
    | T
    | {
        name?: T;
        description?: T;
        resolution?: T;
        charactersInvolved?:
          | T
          | {
              character?: T;
              id?: T;
            };
        id?: T;
      };
  generationMetadata?:
    | T
    | {
        generatedAt?: T;
        processingTime?: T;
        qualityScore?: T;
        generationNotes?: T;
      };
  durationCompliance?:
    | T
    | {
        formatCategory?: T;
        targetDuration?: T;
        isCompliant?: T;
        complexityLevel?: T;
        constraints?:
          | T
          | {
              maxStoryBeats?: T;
              maxCharacters?: T;
              maxLocations?: T;
              maxSubplots?: T;
              beatsPerMinute?: T;
            };
        actualMetrics?:
          | T
          | {
              storyBeatsCount?: T;
              characterCount?: T;
              subplotCount?: T;
              averageBeatsPerMinute?: T;
            };
        warnings?:
          | T
          | {
              warning?: T;
              id?: T;
            };
        recommendations?:
          | T
          | {
              recommendation?: T;
              id?: T;
            };
        pacingGuidelines?:
          | T
          | {
              guideline?: T;
              id?: T;
            };
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "character-references_select".
 */
export interface CharacterReferencesSelect<T extends boolean = true> {
  project?: T;
  projectCharacterName?: T;
  libraryCharacterId?: T;
  characterRole?: T;
  generationStatus?: T;
  generationMetadata?:
    | T
    | {
        generatedAt?: T;
        lastImageUpdate?: T;
        errorMessage?: T;
        generationMethod?: T;
        qualityScore?: T;
        completeness?: T;
        characterLibraryStatus?: T;
        bamlData?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fundamental-data_select".
 */
export interface FundamentalDataSelect<T extends boolean = true> {
  project?: T;
  projectName?: T;
  visualStyle?:
    | T
    | {
        cinematographyStyle?: T;
        colorPalette?:
          | T
          | {
              dominance?: T;
              saturation?: T;
              symbolicColors?: T;
            };
        lightingPreferences?: T;
        cameraMovement?: T;
      };
  references?:
    | T
    | {
        inspirationalMovies?:
          | T
          | {
              title?: T;
              year?: T;
              specificElements?: T;
              id?: T;
            };
        visualReferences?: T;
        narrativeReferences?: T;
      };
  characterArchetypes?:
    | T
    | {
        protagonistType?: T;
        supportingRoles?: T;
        relationshipDynamics?: T;
      };
  themes?:
    | T
    | {
        centralThemes?: T;
        moralQuestions?: T;
        messageTakeaway?: T;
      };
  setting?:
    | T
    | {
        timePeriod?: T;
        geographicSetting?: T;
        socialContext?: T;
        scale?: T;
      };
  pacing?:
    | T
    | {
        narrativeStructure?: T;
        pacingStyle?: T;
        climaxIntensity?: T;
      };
  contentGuidelines?:
    | T
    | {
        contentRestrictions?: T;
        culturalSensitivities?: T;
        educationalValue?: T;
      };
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres_select".
 */
export interface GenresSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  category?: T;
  parentGenre?: T;
  narrativeElements?:
    | T
    | {
        typicalStructure?: T;
        characterArchetypes?: T;
        commonThemes?: T;
        visualStyle?: T;
      };
  audienceAppeal?:
    | T
    | {
        primaryDemographics?: T;
        emotionalAppeal?: T;
      };
  productionConsiderations?:
    | T
    | {
        budgetRange?: T;
        technicalRequirements?: T;
      };
  isActive?: T;
  sortOrder?: T;
  aiGenerationTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audience-demographics_select".
 */
export interface AudienceDemographicsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  category?: T;
  ageRange?:
    | T
    | {
        minAge?: T;
        maxAge?: T;
        ratingGuideline?: T;
      };
  characteristics?:
    | T
    | {
        interests?: T;
        mediaConsumption?: T;
        values?: T;
        lifestyle?: T;
      };
  contentPreferences?:
    | T
    | {
        preferredGenres?: T;
        contentComplexity?: T;
        attentionSpan?: T;
        emotionalPreferences?: T;
      };
  marketingConsiderations?:
    | T
    | {
        primaryChannels?: T;
        messagingTone?: T;
        influencers?: T;
      };
  isActive?: T;
  sortOrder?: T;
  aiGenerationTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tone-options_select".
 */
export interface ToneOptionsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  category?: T;
  intensity?: T;
  narrativeImpact?:
    | T
    | {
        dialogueStyle?: T;
        pacingInfluence?: T;
        characterBehavior?: T;
        conflictStyle?: T;
      };
  visualElements?:
    | T
    | {
        colorPalette?: T;
        lightingStyle?: T;
        cameraWork?: T;
        editingStyle?: T;
      };
  audioElements?:
    | T
    | {
        musicStyle?: T;
        soundDesign?: T;
        voiceDirection?: T;
      };
  genreCompatibility?: T;
  audienceResponse?:
    | T
    | {
        emotionalEffect?: T;
        engagementLevel?: T;
        demographicAppeal?: T;
      };
  examples?:
    | T
    | {
        title?: T;
        year?: T;
        description?: T;
        id?: T;
      };
  isActive?: T;
  sortOrder?: T;
  aiGenerationTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "central-themes_select".
 */
export interface CentralThemesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  category?: T;
  universality?: T;
  thematicElements?:
    | T
    | {
        coreQuestions?:
          | T
          | {
              question?: T;
              id?: T;
            };
        commonConflicts?: T;
        characterArcs?: T;
        resolutionPatterns?: T;
      };
  narrativeImpact?:
    | T
    | {
        plotInfluence?: T;
        characterDevelopment?: T;
        dialogueStyle?: T;
        symbolism?: T;
      };
  genreCompatibility?: T;
  audienceResonance?:
    | T
    | {
        emotionalImpact?: T;
        targetDemographics?: T;
        culturalConsiderations?: T;
      };
  visualRepresentation?:
    | T
    | {
        colorAssociations?: T;
        visualMotifs?: T;
        settingInfluence?: T;
      };
  examples?:
    | T
    | {
        title?: T;
        year?: T;
        genre?: T;
        thematicTreatment?: T;
        id?: T;
      };
  relatedThemes?: T;
  isActive?: T;
  sortOrder?: T;
  aiGenerationTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mood-descriptors_select".
 */
export interface MoodDescriptorsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  category?: T;
  intensity?: T;
  emotionalImpact?: T;
  visualElements?:
    | T
    | {
        colorAssociations?: T;
        lightingStyle?: T;
        compositionStyle?: T;
      };
  audioElements?:
    | T
    | {
        musicStyle?: T;
        soundDesign?: T;
      };
  genreCompatibility?: T;
  isActive?: T;
  sortOrder?: T;
  aiGenerationTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cinematography-styles_select".
 */
export interface CinematographyStylesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  category?: T;
  complexity?: T;
  technicalElements?:
    | T
    | {
        cameraMovement?: T;
        framingApproach?: T;
        lensChoices?: T;
        colorGrading?: T;
      };
  visualCharacteristics?:
    | T
    | {
        lightingStyle?: T;
        depthOfField?: T;
        visualTexture?: T;
      };
  genreCompatibility?: T;
  productionConsiderations?:
    | T
    | {
        budgetRequirements?: T;
        equipmentNeeds?: T;
        skillRequirements?: T;
      };
  examples?:
    | T
    | {
        title?: T;
        year?: T;
        description?: T;
        id?: T;
      };
  isActive?: T;
  sortOrder?: T;
  aiGenerationTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}